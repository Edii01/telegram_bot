import logging
import asyncio
from uuid import uuid4
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes
)

BOT_TOKEN = "7771048228:AAG2OxpFXDPj7mlzoQqtavan-vs1v3CmOUU"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class Case:
    def __init__(self, user_id, duration, topic):
        self.case_id = str(uuid4())[:8]
        self.user_id = user_id
        self.duration = duration
        self.topic = topic
        self.start_time = datetime.now()
        self.end_time = self.start_time + timedelta(minutes=duration)

    def time_left(self):
        delta = self.end_time - datetime.now()
        if delta.total_seconds() <= 0:
            return "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ"
        else:
            minutes = delta.seconds // 60
            seconds = delta.seconds % 60
            return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"

    def extend_time(self, minutes):
        self.end_time += timedelta(minutes=minutes)

active_cases = {}

TIPS = [
    "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É",
    "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
    "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç",
    "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
    "üìÇ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –∫–µ–π—Å", callback_data="new_case")],
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–µ–π—Å—ã", callback_data="show_cases")]
    ]
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ–π—Å–∞–º–∏.", reply_markup=InlineKeyboardMarkup(keyboard))

async def remindme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        duration = int(context.args[0])
        topic = " ".join(context.args[1:])
        user_id = update.effective_user.id

        case = Case(user_id, duration, topic)
        active_cases[case.case_id] = case

        await update.message.reply_text(
            f"‚úÖ –ö–µ–π—Å —Å–æ–∑–¥–∞–Ω!\nüÜî {case.case_id}\nüìå {topic}\n‚è∞ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {duration} –º–∏–Ω—É—Ç."
        )

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(remind_later(user_id, case.case_id, duration, topic, context))

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /remindme 10 –¢–µ–º–∞ –∫–µ–π—Å–∞")

async def remind_later(user_id, case_id, duration, topic, context):
    await asyncio.sleep(duration * 60)
    if case_id in active_cases:
        await context.bot.send_message(chat_id=user_id, text=f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –∫–µ–π—Å ¬´{topic}¬ª –≤—ã—à–ª–æ!")
        del active_cases[case_id]

async def show_cases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_cases = [c for c in active_cases.values() if c.user_id == user_id]

    if not user_cases:
        message = "üóÇ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–µ–π—Å–æ–≤."
        if update.message:
            await update.message.reply_text(message)
        elif update.callback_query:
            await update.callback_query.message.reply_text(message)
        return

    for c in user_cases:
        keyboard = [
            [
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{c.case_id}"),
                InlineKeyboardButton("‚ûï 5 –º–∏–Ω", callback_data=f"extend_{c.case_id}"),
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"tip_{c.case_id}")
            ]
        ]
        text = f"üÜî {c.case_id}\nüìå {c.topic}\n‚è± –û—Å—Ç–∞–ª–æ—Å—å: {c.time_left()}"
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = update.effective_user.id

    if data == "new_case":
        await query.message.reply_text("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/remindme <–º–∏–Ω—É—Ç> <—Ç–µ–º–∞>`\n\n–ü—Ä–∏–º–µ—Ä:\n`/remindme 10 –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–∞`", parse_mode="Markdown")
    elif data == "show_cases":
        await show_cases(update, context)
    elif data.startswith("delete_"):
        case_id = data.split("_")[1]
        case = active_cases.get(case_id)
        if case and case.user_id == user_id:
            del active_cases[case_id]
            await query.message.reply_text(f"üóë –ö–µ–π—Å ¬´{case.topic}¬ª —É–¥–∞–ª—ë–Ω.")
    elif data.startswith("extend_"):
        case_id = data.split("_")[1]
        case = active_cases.get(case_id)
        if case and case.user_id == user_id:
            case.extend_time(5)
            await query.message.reply_text(f"‚è± –í—Ä–µ–º—è –∫–µ–π—Å–∞ ¬´{case.topic}¬ª –ø—Ä–æ–¥–ª–µ–Ω–æ –Ω–∞ 5 –º–∏–Ω—É—Ç.")
    elif data.startswith("tip_"):
        tip = TIPS[datetime.now().second % len(TIPS)]
        await query.message.reply_text(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {tip}")


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("remindme", remindme))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
