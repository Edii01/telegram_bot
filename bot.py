import os
import logging
import asyncio
from typing import Dict, List
from uuid import uuid4
from datetime import datetime, timedelta
from dataclasses import dataclass

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BotCommand
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    Application
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --- #
class Config:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    TIPS = [
        "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –≤ –¥–Ω",
        "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫",
    ]
    TIMEZONE = "Europe/Moscow"

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö --- #
@dataclass
class Case:
    case_id: str
    user_id: int
    duration: int
    topic: str
    start_time: datetime
    end_time: datetime
    message_id: int = None
    is_completed: bool = False

    def time_left(self) -> str:
        delta = self.end_time - datetime.now()
        if delta.total_seconds() <= 0:
            return "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ"
        minutes = delta.seconds // 60
        seconds = delta.seconds % 60
        return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"

    def extend_time(self, minutes: int):
        self.end_time += timedelta(minutes=minutes)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö --- #
class CaseManager:
    def __init__(self):
        self.active_cases: Dict[str, Case] = {}
        self.completed_cases: List[Case] = []

    def add_case(self, case: Case):
        self.active_cases[case.case_id] = case

    def complete_case(self, case_id: str):
        if case_id in self.active_cases:
            case = self.active_cases.pop(case_id)
            case.is_completed = True
            self.completed_cases.append(case)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ --- #
class BotHandlers:
    def __init__(self, case_manager: CaseManager):
        self.case_manager = case_manager

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π –∫–µ–π—Å", callback_data="new_case")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∫–µ–π—Å—ã", callback_data="show_cases"),
             InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /remindme —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def remindme(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if len(context.args) < 2:
                raise ValueError

            duration = int(context.args[0])
            topic = " ".join(context.args[1:])
            user_id = update.effective_user.id

            case = Case(
                case_id=str(uuid4())[:8],
                user_id=user_id,
                duration=duration,
                topic=topic,
                start_time=datetime.now(),
                end_time=datetime.now() + timedelta(minutes=duration)
            ) 
            self.case_manager.add_case(case)

            msg = await update.message.reply_text(
                f"‚úÖ –ö–µ–π—Å —Å–æ–∑–¥–∞–Ω!\n"
                f"üÜî ID: {case.case_id}\n"
                f"üìå –¢–µ–º–∞: {topic}\n"
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑: {duration} –º–∏–Ω.\n"
                f"‚è≥ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {case.end_time.strftime('%H:%M')}"
            )
            case.message_id = msg.message_id

            asyncio.create_task(self._send_reminder(user_id, case.case_id, context))

        except (ValueError, IndexError):
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
                "/remindme <–º–∏–Ω—É—Ç—ã> <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>\n"
                "–ü—Ä–∏–º–µ—Ä: /remindme 30 –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É"
            )

    async def _send_reminder(self, user_id: int, case_id: str, context: ContextTypes.DEFAULT_TYPE):
        await asyncio.sleep(self.case_manager.active_cases[case_id].duration * 60)
        
        if case_id in self.case_manager.active_cases:
            case = self.case_manager.active_cases[case_id]
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –∫–µ–π—Å ¬´{case.topic}¬ª –≤—ã—à–ª–æ!\n"
                     f"–ò—Å–ø–æ–ª—å–∑—É–π /show_cases –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            )
            self.case_manager.complete_case(case_id)

# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª --- #
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        completed = len([c for c in self.case_manager.completed_cases if c.user_id == user_id])
        active = len([c for c in self.case_manager.active_cases.values() if c.user_id == user_id])
        
        await update.message.reply_text(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–µ–π—Å–æ–≤: {completed}\n"
            f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active}\n"
            f"‚è≥ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: N/A"
        )

    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/remindme <–º–∏–Ω—É—Ç—ã> <–∑–∞–¥–∞—á–∞> - –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "/show_cases - –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        )
        await update.message.reply_text(help_text)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ --- #
async def set_bot_commands(application: Application):
    await application.bot.set_my_commands([
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("remindme", "–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        BotCommand("show_cases", "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"),
        BotCommand("stats", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"),
        BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    ])

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    case_manager = CaseManager()
    handlers = BotHandlers(case_manager)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = ApplicationBuilder().token(Config.BOT_TOKEN).build()
    app.post_init = set_bot_commands

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", handlers.start))
    app.add_handler(CommandHandler("remindme", handlers.remindme))
    app.add_handler(CommandHandler("show_cases", handlers.show_cases))
    app.add_handler(CommandHandler("stats", handlers.show_stats))
    app.add_handler(CommandHandler("help", handlers.show_help))
    app.add_handler(CallbackQueryHandler(handlers.button_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()
